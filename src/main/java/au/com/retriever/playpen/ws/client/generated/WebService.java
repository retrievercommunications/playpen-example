package au.com.retriever.playpen.ws.client.generated;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * This class was generated by Apache CXF 3.1.12
 * 2018-03-27T10:22:12.264+11:00
 * Generated source version: 3.1.12
 * 
 */
@WebServiceClient(name = "WebService", 
                  wsdlLocation = "file:/C:/Users/Finnegan.Hussey/Documents/repositories/playpen-example/Java/src/main/resources/wsdl/webservice.wsdl",
                  targetNamespace = "http://ws.api.playpen.retriever.com.au/") 
public class WebService extends javax.xml.ws.Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://ws.api.playpen.retriever.com.au/", "WebService");
    public final static QName WebPort = new QName("http://ws.api.playpen.retriever.com.au/", "WebPort");
    static {
        URL url = null;
        try {
            url = new URL("file:/C:/Users/Finnegan.Hussey/Documents/repositories/playpen-example/Java/src/main/resources/wsdl/webservice.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(WebService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:/C:/Users/Finnegan.Hussey/Documents/repositories/playpen-example/Java/src/main/resources/wsdl/webservice.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public WebService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public WebService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public WebService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public WebService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public WebService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public WebService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns Web
     */
    @WebEndpoint(name = "WebPort")
    public Web getWebPort() {
        return super.getPort(WebPort, Web.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Web
     */
    @WebEndpoint(name = "WebPort")
    public Web getWebPort(WebServiceFeature... features) {
        return super.getPort(WebPort, Web.class, features);
    }

}
